#textdomain wesnoth-Return_from_Captivity

#define CREATE_UNIT TYPE SIDE X Y
    #!{GENERIC_UNIT SIDE TYPE X Y}
    [unit]
        type={TYPE}
        side={SIDE}
        x={X}
        y={Y}
        generate_name=yes
        random_traits=yes
    [/unit]
#enddef

#define CREATE_LOYAL_UNIT TYPE SIDE X Y
    #!{LOYAL_UNIT SIDE TYPE X Y}
    [unit]
        type={TYPE}
        side={SIDE}
        x={X}
        y={Y}
        generate_name=yes
        random_traits=yes
        [modifications]
            {TRAIT_LOYAL}
        [/modifications]
        {IS_LOYAL}
    [/unit]
#enddef

#define CREATE_GUARD G_TYPE G_SIDE G_X G_Y
    #!{GENERIC_UNIT SIDE TYPE X Y} {GUARDIAN}
    [unit]
        type={G_TYPE}
        side={G_SIDE}
        x={G_X}
        y={G_Y}
        generate_name=yes
        random_traits=yes
        ai_special=guardian
    [/unit]
#enddef

#define CREATE_LOYAL_GUARD G_TYPE G_SIDE G_X G_Y
    #!{LOYAL_UNIT SIDE TYPE X Y} {GUARDIAN}
    [unit]
        type={G_TYPE}
        side={G_SIDE}
        x={G_X}
        y={G_Y}
        generate_name=yes
        random_traits=yes
        ai_special=guardian
        [modifications]
            {TRAIT_LOYAL}
        [/modifications]
        {IS_LOYAL}
    [/unit]
#enddef

#define INCREASE_GOLD P_SIDE P_COUNT
    [gold]
        side={P_SIDE}
        amount={P_COUNT}
    [/gold]
    [store_side]
        side={P_SIDE}
        variable=stored_side_{P_SIDE}
    [/store_side]
    {IF_VAR stored_side_{P_SIDE}.gold less_than {P_COUNT} (
        [then]
            [modify_side]
                side={P_SIDE}
                gold={P_COUNT}
            [/modify_side]
        [/then]
    )}
    {CLEAR_VARIABLE stored_side_{P_SIDE} }
#enddef

#define GOLD_AT_LEAST P_SIDE P_COUNT
    [store_side]
        side={P_SIDE}
        variable=stored_side_{P_SIDE}
    [/store_side]
    {IF_VAR stored_side_{P_SIDE}.gold less_than {P_COUNT} (
        [then]
            [modify_side]
                side={P_SIDE}
                gold={P_COUNT}
            [/modify_side]
        [/then]
    )}
    {CLEAR_VARIABLE stored_side_{P_SIDE} }
#enddef

#define PLACE_CAPTIVE C_IMG C_X C_Y C_TYPE C_SIDE C_NUM C_LOYAL C_DOIT
    {PLACE_IMAGE {C_IMG} {C_X} {C_Y} }
    {PLACE_IMAGE items/cage.png {C_X} {C_Y} }
    [event]
        name=moveto
        first_time_only=yes

        [filter]
            side=1,2
            x={C_X}
            y={C_Y}
        [/filter]

        [remove_item]
        [/remove_item]

        {VARIABLE loyal {C_LOYAL}}
        {REPEAT {C_NUM} (
            {IF_VAR loyal equals yes (
                [then]
                    [unit]
                        side={C_SIDE}
                        x={C_X}
                        y={C_Y}
                        random_traits=yes
                        type={C_TYPE}
                        [modifications]
                            {TRAIT_LOYAL}
                        [/modifications]
                        {IS_LOYAL}
                    [/unit]
                [/then]
                [else]
                    [unit]
                        side={C_SIDE}
                        x={C_X}
                        y={C_Y}
                        random_traits=yes
                        type={C_TYPE}
                    [/unit]
                [/else]
            )}
        )}
        {C_DOIT}
        {CLEAR_VARIABLE loyal}
    [/event]
#enddef

#define RFC_ABILITY_DANCER
    [chance_to_hit]
        id=rfc_dance
        value=40
        cumulative=no
        name= _ "dancer"
        name_inactive= _ "dancer"
        female_name= _ "female^dancer"
        description= _ "Dancer:
This unit always has a defense of 60% when attacking, because the enemy cannot get a direct hit."
        description_inactive= _ "Dancer:
This unit always has a defense of 60% when attacking, because the enemy cannot get a direct hit."
        apply_to=opponent
        active_on=offense
    [/chance_to_hit]
#enddef

#    [ai]
#                {MODIFY_AI_ADD_CANDIDATE_ACTION 2 main_loop (
#                    [candidate_action]
#                        id=escape_south
#                        engine=fai
#                        name=escape_south
#                        type=movement
#                        evaluation="if(me.id='hunter_id',{AI_CA_GOTO_SCORE}+10,0)"
#                        action="move(me.loc, choose(unit_moves(me.loc),'mloc',-sum(map(simplest_path(mloc,find(units,id='target_id').loc,me.loc), #'path_location', movement_cost( me, path_location ) ))) )"
#                    [/candidate_action]
#                )}
#                {MODIFY_AI_ADD_CANDIDATE_ACTION 2 main_loop (
#                        [candidate_action]
#                            id=attack_gra
#                            engine=fai
#                            name=attack_gra
#                            type=attack
#                            evaluation="if(me.id = 'hunter_id' and target.id = 'target_id', {AI_CA_GOTO_SCORE} ,0)"
#                            action="attack(me.loc, me.loc, target.loc)"
#                        [/candidate_action]
#                   )}
#            [/ai]

#            formula="move(me.loc, nearest_loc(nearest_loc(me.loc,map(filter(map.terrain,((id='grassland^great_tree') or(id='savanna^forest'))),loc)),unit_moves(me.loc)))"
